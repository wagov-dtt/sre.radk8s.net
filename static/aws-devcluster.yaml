AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 r6a.4xlarge with Amazon Linux 2023, Helm, dual-stack NLB, and 4TB gp3 encrypted root volume

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-VPC'}]

  VPCIPv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties: {VpcId: !Ref VPC, AmazonProvidedIpv6CidrBlock: true}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-IGW'}]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: {InternetGatewayId: !Ref InternetGateway, VpcId: !Ref VPC}

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPCIPv6
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Ipv6CidrBlock: !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 2, 64]]
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-PublicSubnetA'}]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: VPCIPv6
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 2, 64]]
      MapPublicIpOnLaunch: true
      AssignIpv6AddressOnCreation: true
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-PublicSubnetB'}]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-PublicRT'}]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  IPv6DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: {RouteTableId: !Ref PublicRouteTable, SubnetId: !Ref PublicSubnetA}

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: {RouteTableId: !Ref PublicRouteTable, SubnetId: !Ref PublicSubnetB}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName} Instance SG'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0}
        - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIpv6: "::/0"}
        - {IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIpv6: "::/0"}
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-InstanceSG'}]

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: ec2.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns: [arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore]
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-InstanceRole'}]

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: {Roles: [!Ref InstanceRole]}

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: r6a.4xlarge
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      SubnetId: !Ref PublicSubnetA
      IamInstanceProfile: !Ref InstanceProfile
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-EC2'}]
      BlockDeviceMappings: [{DeviceName: /dev/xvda, Ebs: {VolumeSize: 1000, VolumeType: gp3, Encrypted: true, Iops: 20000, Throughput: 1000}}]
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          dnf update -y
          dnf install -y iscsi-initiator-utils nfs-utils
          echo -e "fs.inotify.max_user_watches = 524288\nfs.inotify.max_user_instances = 8192\nvm.max_map_count = 262144" > /etc/sysctl.d/99-k8s-resources.conf
          sysctl --system
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" K3S_KUBECONFIG_OUTPUT="/root/.kube/config" INSTALL_K3S_EXEC='--kubelet-arg=max-pods=5000 --kube-controller-manager-arg=node-cidr-mask-size=18' sh -

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      IpAddressType: dualstack
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-NLB'}]

  NLBTargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: TCP
      Port: 80
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VPC
      Targets: [{Id: !Ref EC2Instance}]
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-NLBTargetGroup80'}]

  NLBTargetGroup443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: TCP
      Port: 443
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VPC
      Targets: [{Id: !Ref EC2Instance}]
      Tags: [{Key: Name, Value: !Sub '${AWS::StackName}-NLBTargetGroup443'}]

  NLBListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: [{Type: forward, TargetGroupArn: !Ref NLBTargetGroup80}]
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP

  NLBListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: [{Type: forward, TargetGroupArn: !Ref NLBTargetGroup443}]
      LoadBalancerArn: !Ref NLB
      Port: 443
      Protocol: TCP

Outputs:
  VPCID: {Description: VPC ID, Value: !Ref VPC}
  InstanceID: {Description: EC2 Instance ID, Value: !Ref EC2Instance}
  LoadBalancerDNS: {Description: DNS Name of the Network Load Balancer, Value: !GetAtt NLB.DNSName}